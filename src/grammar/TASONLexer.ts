// Generated from TASON.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class TASONLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly TYPE_NAME = 12;
	public static readonly IDENTIFIER = 13;
	public static readonly STRING = 14;
	public static readonly NUMBER = 15;
	public static readonly WS = 16;
	public static readonly SINGLE_LINE_COMMENT = 17;
	public static readonly MULTI_LINE_COMMENT = 18;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'true'", 
                                                            "'false'", "'null'", 
                                                            "'('", "')'", 
                                                            "'{'", "','", 
                                                            "'}'", "':'", 
                                                            "'['", "']'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             "TYPE_NAME", 
                                                             "IDENTIFIER", 
                                                             "STRING", "NUMBER", 
                                                             "WS", "SINGLE_LINE_COMMENT", 
                                                             "MULTI_LINE_COMMENT" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "TYPE_NAME", "IDENTIFIER", "STRING", "ESC", "UNICODE", 
		"HEX", "SAFE_STRING_CHAR", "NUMBER", "INT", "EXP", "WS", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, TASONLexer._ATN, TASONLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "TASON.g4"; }

	public get literalNames(): (string | null)[] { return TASONLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return TASONLexer.symbolicNames; }
	public get ruleNames(): string[] { return TASONLexer.ruleNames; }

	public get serializedATN(): number[] { return TASONLexer._serializedATN; }

	public get channelNames(): string[] { return TASONLexer.channelNames; }

	public get modeNames(): string[] { return TASONLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,18,246,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
	1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,5,11,
	84,8,11,10,11,12,11,87,9,11,1,12,1,12,5,12,91,8,12,10,12,12,12,94,9,12,
	1,13,1,13,1,13,5,13,99,8,13,10,13,12,13,102,9,13,1,13,1,13,1,13,1,13,5,
	13,108,8,13,10,13,12,13,111,9,13,1,13,3,13,114,8,13,1,14,1,14,1,14,3,14,
	119,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,3,18,132,
	8,18,1,18,1,18,1,18,5,18,137,8,18,10,18,12,18,140,9,18,3,18,142,8,18,1,
	18,3,18,145,8,18,1,18,3,18,148,8,18,1,18,1,18,4,18,152,8,18,11,18,12,18,
	153,1,18,3,18,157,8,18,1,18,1,18,1,18,1,18,4,18,163,8,18,11,18,12,18,164,
	1,18,1,18,1,18,1,18,4,18,171,8,18,11,18,12,18,172,1,18,1,18,1,18,1,18,4,
	18,179,8,18,11,18,12,18,180,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
	1,18,1,18,3,18,194,8,18,1,19,1,19,1,19,5,19,199,8,19,10,19,12,19,202,9,
	19,3,19,204,8,19,1,20,1,20,3,20,208,8,20,1,20,4,20,211,8,20,11,20,12,20,
	212,1,21,4,21,216,8,21,11,21,12,21,217,1,21,1,21,1,22,1,22,1,22,1,22,5,
	22,226,8,22,10,22,12,22,229,9,22,1,22,1,22,1,23,1,23,1,23,1,23,5,23,237,
	8,23,10,23,12,23,240,9,23,1,23,1,23,1,23,1,23,1,23,1,238,0,24,1,1,3,2,5,
	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,0,31,0,33,
	0,35,0,37,15,39,0,41,0,43,16,45,17,47,18,1,0,14,1,0,65,90,4,0,48,57,65,
	90,95,95,97,122,3,0,65,90,95,95,97,122,9,0,34,34,39,39,47,47,92,92,98,98,
	102,102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,4,0,0,31,34,34,39,
	39,92,92,1,0,48,57,1,0,48,49,1,0,48,55,1,0,49,57,2,0,69,69,101,101,2,0,
	43,43,45,45,3,0,9,10,13,13,32,32,2,0,10,10,13,13,270,0,1,1,0,0,0,0,3,1,
	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
	1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
	0,0,27,1,0,0,0,0,37,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,
	1,0,0,0,3,54,1,0,0,0,5,60,1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,0,11,69,1,0,0,
	0,13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,21,79,1,0,0,0,
	23,81,1,0,0,0,25,88,1,0,0,0,27,113,1,0,0,0,29,115,1,0,0,0,31,120,1,0,0,
	0,33,126,1,0,0,0,35,128,1,0,0,0,37,193,1,0,0,0,39,203,1,0,0,0,41,205,1,
	0,0,0,43,215,1,0,0,0,45,221,1,0,0,0,47,232,1,0,0,0,49,50,5,116,0,0,50,51,
	5,114,0,0,51,52,5,117,0,0,52,53,5,101,0,0,53,2,1,0,0,0,54,55,5,102,0,0,
	55,56,5,97,0,0,56,57,5,108,0,0,57,58,5,115,0,0,58,59,5,101,0,0,59,4,1,0,
	0,0,60,61,5,110,0,0,61,62,5,117,0,0,62,63,5,108,0,0,63,64,5,108,0,0,64,
	6,1,0,0,0,65,66,5,40,0,0,66,8,1,0,0,0,67,68,5,41,0,0,68,10,1,0,0,0,69,70,
	5,123,0,0,70,12,1,0,0,0,71,72,5,44,0,0,72,14,1,0,0,0,73,74,5,125,0,0,74,
	16,1,0,0,0,75,76,5,58,0,0,76,18,1,0,0,0,77,78,5,91,0,0,78,20,1,0,0,0,79,
	80,5,93,0,0,80,22,1,0,0,0,81,85,7,0,0,0,82,84,7,1,0,0,83,82,1,0,0,0,84,
	87,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,24,1,0,0,0,87,85,1,0,0,0,88,92,
	7,2,0,0,89,91,7,1,0,0,90,89,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,92,93,1,
	0,0,0,93,26,1,0,0,0,94,92,1,0,0,0,95,100,5,34,0,0,96,99,3,29,14,0,97,99,
	3,35,17,0,98,96,1,0,0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,
	101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,114,5,34,0,0,104,109,5,
	39,0,0,105,108,3,29,14,0,106,108,3,35,17,0,107,105,1,0,0,0,107,106,1,0,
	0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,
	109,1,0,0,0,112,114,5,39,0,0,113,95,1,0,0,0,113,104,1,0,0,0,114,28,1,0,
	0,0,115,118,5,92,0,0,116,119,7,3,0,0,117,119,3,31,15,0,118,116,1,0,0,0,
	118,117,1,0,0,0,119,30,1,0,0,0,120,121,5,117,0,0,121,122,3,33,16,0,122,
	123,3,33,16,0,123,124,3,33,16,0,124,125,3,33,16,0,125,32,1,0,0,0,126,127,
	7,4,0,0,127,34,1,0,0,0,128,129,8,5,0,0,129,36,1,0,0,0,130,132,5,45,0,0,
	131,130,1,0,0,0,131,132,1,0,0,0,132,133,1,0,0,0,133,141,3,39,19,0,134,138,
	5,46,0,0,135,137,7,6,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,
	0,138,139,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,141,134,1,0,0,0,141,142,
	1,0,0,0,142,144,1,0,0,0,143,145,3,41,20,0,144,143,1,0,0,0,144,145,1,0,0,
	0,145,194,1,0,0,0,146,148,5,45,0,0,147,146,1,0,0,0,147,148,1,0,0,0,148,
	149,1,0,0,0,149,151,5,46,0,0,150,152,7,6,0,0,151,150,1,0,0,0,152,153,1,
	0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,157,3,41,20,0,
	156,155,1,0,0,0,156,157,1,0,0,0,157,194,1,0,0,0,158,159,5,48,0,0,159,160,
	5,120,0,0,160,162,1,0,0,0,161,163,3,33,16,0,162,161,1,0,0,0,163,164,1,0,
	0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,194,1,0,0,0,166,167,5,48,0,0,167,
	168,5,98,0,0,168,170,1,0,0,0,169,171,7,7,0,0,170,169,1,0,0,0,171,172,1,
	0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,194,1,0,0,0,174,175,5,48,0,0,
	175,176,5,111,0,0,176,178,1,0,0,0,177,179,7,8,0,0,178,177,1,0,0,0,179,180,
	1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,194,1,0,0,0,182,183,5,73,0,
	0,183,184,5,110,0,0,184,185,5,102,0,0,185,186,5,105,0,0,186,187,5,110,0,
	0,187,188,5,105,0,0,188,189,5,116,0,0,189,194,5,121,0,0,190,191,5,78,0,
	0,191,192,5,97,0,0,192,194,5,78,0,0,193,131,1,0,0,0,193,147,1,0,0,0,193,
	158,1,0,0,0,193,166,1,0,0,0,193,174,1,0,0,0,193,182,1,0,0,0,193,190,1,0,
	0,0,194,38,1,0,0,0,195,204,5,48,0,0,196,200,7,9,0,0,197,199,7,6,0,0,198,
	197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,204,1,0,
	0,0,202,200,1,0,0,0,203,195,1,0,0,0,203,196,1,0,0,0,204,40,1,0,0,0,205,
	207,7,10,0,0,206,208,7,11,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,210,1,
	0,0,0,209,211,7,6,0,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,
	213,1,0,0,0,213,42,1,0,0,0,214,216,7,12,0,0,215,214,1,0,0,0,216,217,1,0,
	0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,6,21,0,0,220,
	44,1,0,0,0,221,222,5,47,0,0,222,223,5,47,0,0,223,227,1,0,0,0,224,226,8,
	13,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,
	228,230,1,0,0,0,229,227,1,0,0,0,230,231,6,22,0,0,231,46,1,0,0,0,232,233,
	5,47,0,0,233,234,5,42,0,0,234,238,1,0,0,0,235,237,9,0,0,0,236,235,1,0,0,
	0,237,240,1,0,0,0,238,239,1,0,0,0,238,236,1,0,0,0,239,241,1,0,0,0,240,238,
	1,0,0,0,241,242,5,42,0,0,242,243,5,47,0,0,243,244,1,0,0,0,244,245,6,23,
	0,0,245,48,1,0,0,0,27,0,85,92,98,100,107,109,113,118,131,138,141,144,147,
	153,156,164,172,180,193,200,203,207,212,217,227,238,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TASONLexer.__ATN) {
			TASONLexer.__ATN = new ATNDeserializer().deserialize(TASONLexer._serializedATN);
		}

		return TASONLexer.__ATN;
	}


	static DecisionsToDFA = TASONLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}