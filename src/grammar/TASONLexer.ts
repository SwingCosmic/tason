// Generated from TASON.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class TASONLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly BOOLEAN_TRUE = 11;
	public static readonly BOOLEAN_FALSE = 12;
	public static readonly NULL = 13;
	public static readonly TYPE_NAME = 14;
	public static readonly IDENTIFIER = 15;
	public static readonly WS = 16;
	public static readonly SINGLE_LINE_COMMENT = 17;
	public static readonly MULTI_LINE_COMMENT = 18;
	public static readonly STRING = 19;
	public static readonly SYMBOL = 20;
	public static readonly NUMBER = 21;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'('", 
                                                            "')'", "'{'", 
                                                            "','", "'}'", 
                                                            "':'", "'['", 
                                                            "']'", "'NaN'", 
                                                            "'Infinity'", 
                                                            "'true'", "'false'", 
                                                            "'null'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, "BOOLEAN_TRUE", 
                                                             "BOOLEAN_FALSE", 
                                                             "NULL", "TYPE_NAME", 
                                                             "IDENTIFIER", 
                                                             "WS", "SINGLE_LINE_COMMENT", 
                                                             "MULTI_LINE_COMMENT", 
                                                             "STRING", "SYMBOL", 
                                                             "NUMBER" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "NULL", "TYPE_NAME", "IDENTIFIER", 
		"WS", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", "STRING", "ESC", "HEX_ESC", 
		"UNICODE", "SAFE_STRING_CHAR", "SYMBOL", "NUMBER", "HEX", "DEC", "OCT", 
		"BIN", "EXP",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, TASONLexer._ATN, TASONLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "TASON.g4"; }

	public get literalNames(): (string | null)[] { return TASONLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return TASONLexer.symbolicNames; }
	public get ruleNames(): string[] { return TASONLexer.ruleNames; }

	public get serializedATN(): number[] { return TASONLexer._serializedATN; }

	public get channelNames(): string[] { return TASONLexer.channelNames; }

	public get modeNames(): string[] { return TASONLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,21,277,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,1,0,1,0,1,1,
	1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,9,
	1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
	1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,5,13,109,8,13,10,13,12,
	13,112,9,13,1,14,1,14,5,14,116,8,14,10,14,12,14,119,9,14,1,15,4,15,122,
	8,15,11,15,12,15,123,1,15,1,15,1,16,1,16,1,16,1,16,5,16,132,8,16,10,16,
	12,16,135,9,16,1,16,1,16,1,17,1,17,1,17,1,17,5,17,143,8,17,10,17,12,17,
	146,9,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,156,8,18,10,18,12,
	18,159,9,18,1,18,1,18,1,18,1,18,5,18,165,8,18,10,18,12,18,168,9,18,1,18,
	3,18,171,8,18,1,19,1,19,1,19,1,19,3,19,177,8,19,1,20,1,20,1,20,1,20,1,21,
	1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,4,24,196,8,
	24,11,24,12,24,197,1,24,3,24,201,8,24,1,24,3,24,204,8,24,1,24,1,24,5,24,
	208,8,24,10,24,12,24,211,9,24,1,24,1,24,5,24,215,8,24,10,24,12,24,218,9,
	24,1,24,3,24,221,8,24,1,24,3,24,224,8,24,1,24,1,24,4,24,228,8,24,11,24,
	12,24,229,1,24,3,24,233,8,24,1,24,1,24,1,24,1,24,4,24,239,8,24,11,24,12,
	24,240,1,24,1,24,1,24,1,24,4,24,247,8,24,11,24,12,24,248,1,24,1,24,1,24,
	1,24,4,24,255,8,24,11,24,12,24,256,3,24,259,8,24,1,25,1,25,1,26,1,26,1,
	27,1,27,1,28,1,28,1,29,1,29,3,29,271,8,29,1,29,4,29,274,8,29,11,29,12,29,
	275,1,144,0,30,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,0,41,0,43,0,45,0,47,20,49,
	21,51,0,53,0,55,0,57,0,59,0,1,0,14,1,0,65,90,4,0,48,57,65,90,95,95,97,122,
	3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,10,0,34,34,
	39,39,47,48,92,92,98,98,102,102,110,110,114,114,116,116,118,118,4,0,0,31,
	34,34,39,39,92,92,2,0,43,43,45,45,1,0,49,57,3,0,48,57,65,70,97,102,1,0,
	48,57,1,0,48,55,1,0,48,49,2,0,69,69,101,101,300,0,1,1,0,0,0,0,3,1,0,0,0,
	0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
	0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
	27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
	0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,61,1,0,0,0,3,63,1,0,0,0,5,65,1,0,0,0,7,
	67,1,0,0,0,9,69,1,0,0,0,11,71,1,0,0,0,13,73,1,0,0,0,15,75,1,0,0,0,17,77,
	1,0,0,0,19,81,1,0,0,0,21,90,1,0,0,0,23,95,1,0,0,0,25,101,1,0,0,0,27,106,
	1,0,0,0,29,113,1,0,0,0,31,121,1,0,0,0,33,127,1,0,0,0,35,138,1,0,0,0,37,
	170,1,0,0,0,39,172,1,0,0,0,41,178,1,0,0,0,43,182,1,0,0,0,45,188,1,0,0,0,
	47,190,1,0,0,0,49,258,1,0,0,0,51,260,1,0,0,0,53,262,1,0,0,0,55,264,1,0,
	0,0,57,266,1,0,0,0,59,268,1,0,0,0,61,62,5,40,0,0,62,2,1,0,0,0,63,64,5,41,
	0,0,64,4,1,0,0,0,65,66,5,123,0,0,66,6,1,0,0,0,67,68,5,44,0,0,68,8,1,0,0,
	0,69,70,5,125,0,0,70,10,1,0,0,0,71,72,5,58,0,0,72,12,1,0,0,0,73,74,5,91,
	0,0,74,14,1,0,0,0,75,76,5,93,0,0,76,16,1,0,0,0,77,78,5,78,0,0,78,79,5,97,
	0,0,79,80,5,78,0,0,80,18,1,0,0,0,81,82,5,73,0,0,82,83,5,110,0,0,83,84,5,
	102,0,0,84,85,5,105,0,0,85,86,5,110,0,0,86,87,5,105,0,0,87,88,5,116,0,0,
	88,89,5,121,0,0,89,20,1,0,0,0,90,91,5,116,0,0,91,92,5,114,0,0,92,93,5,117,
	0,0,93,94,5,101,0,0,94,22,1,0,0,0,95,96,5,102,0,0,96,97,5,97,0,0,97,98,
	5,108,0,0,98,99,5,115,0,0,99,100,5,101,0,0,100,24,1,0,0,0,101,102,5,110,
	0,0,102,103,5,117,0,0,103,104,5,108,0,0,104,105,5,108,0,0,105,26,1,0,0,
	0,106,110,7,0,0,0,107,109,7,1,0,0,108,107,1,0,0,0,109,112,1,0,0,0,110,108,
	1,0,0,0,110,111,1,0,0,0,111,28,1,0,0,0,112,110,1,0,0,0,113,117,7,2,0,0,
	114,116,7,1,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,117,118,
	1,0,0,0,118,30,1,0,0,0,119,117,1,0,0,0,120,122,7,3,0,0,121,120,1,0,0,0,
	122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,126,
	6,15,0,0,126,32,1,0,0,0,127,128,5,47,0,0,128,129,5,47,0,0,129,133,1,0,0,
	0,130,132,8,4,0,0,131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,
	1,0,0,0,134,136,1,0,0,0,135,133,1,0,0,0,136,137,6,16,0,0,137,34,1,0,0,0,
	138,139,5,47,0,0,139,140,5,42,0,0,140,144,1,0,0,0,141,143,9,0,0,0,142,141,
	1,0,0,0,143,146,1,0,0,0,144,145,1,0,0,0,144,142,1,0,0,0,145,147,1,0,0,0,
	146,144,1,0,0,0,147,148,5,42,0,0,148,149,5,47,0,0,149,150,1,0,0,0,150,151,
	6,17,0,0,151,36,1,0,0,0,152,157,5,34,0,0,153,156,3,39,19,0,154,156,3,45,
	22,0,155,153,1,0,0,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,0,157,
	158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,171,5,34,0,0,161,166,5,
	39,0,0,162,165,3,39,19,0,163,165,3,45,22,0,164,162,1,0,0,0,164,163,1,0,
	0,0,165,168,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,
	166,1,0,0,0,169,171,5,39,0,0,170,152,1,0,0,0,170,161,1,0,0,0,171,38,1,0,
	0,0,172,176,5,92,0,0,173,177,7,5,0,0,174,177,3,43,21,0,175,177,3,41,20,
	0,176,173,1,0,0,0,176,174,1,0,0,0,176,175,1,0,0,0,177,40,1,0,0,0,178,179,
	5,120,0,0,179,180,3,51,25,0,180,181,3,51,25,0,181,42,1,0,0,0,182,183,5,
	117,0,0,183,184,3,51,25,0,184,185,3,51,25,0,185,186,3,51,25,0,186,187,3,
	51,25,0,187,44,1,0,0,0,188,189,8,6,0,0,189,46,1,0,0,0,190,191,7,7,0,0,191,
	48,1,0,0,0,192,203,5,48,0,0,193,195,5,46,0,0,194,196,3,53,26,0,195,194,
	1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,200,1,0,0,0,
	199,201,3,59,29,0,200,199,1,0,0,0,200,201,1,0,0,0,201,204,1,0,0,0,202,204,
	3,59,29,0,203,193,1,0,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,259,1,0,0,
	0,205,209,7,8,0,0,206,208,3,53,26,0,207,206,1,0,0,0,208,211,1,0,0,0,209,
	207,1,0,0,0,209,210,1,0,0,0,210,223,1,0,0,0,211,209,1,0,0,0,212,216,5,46,
	0,0,213,215,3,53,26,0,214,213,1,0,0,0,215,218,1,0,0,0,216,214,1,0,0,0,216,
	217,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,219,221,3,59,29,0,220,219,1,
	0,0,0,220,221,1,0,0,0,221,224,1,0,0,0,222,224,3,59,29,0,223,212,1,0,0,0,
	223,222,1,0,0,0,223,224,1,0,0,0,224,259,1,0,0,0,225,227,5,46,0,0,226,228,
	3,53,26,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,
	0,230,232,1,0,0,0,231,233,3,59,29,0,232,231,1,0,0,0,232,233,1,0,0,0,233,
	259,1,0,0,0,234,235,5,48,0,0,235,236,5,120,0,0,236,238,1,0,0,0,237,239,
	3,51,25,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
	0,241,259,1,0,0,0,242,243,5,48,0,0,243,244,5,111,0,0,244,246,1,0,0,0,245,
	247,3,55,27,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,
	0,0,0,249,259,1,0,0,0,250,251,5,48,0,0,251,252,5,98,0,0,252,254,1,0,0,0,
	253,255,3,57,28,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,257,
	1,0,0,0,257,259,1,0,0,0,258,192,1,0,0,0,258,205,1,0,0,0,258,225,1,0,0,0,
	258,234,1,0,0,0,258,242,1,0,0,0,258,250,1,0,0,0,259,50,1,0,0,0,260,261,
	7,9,0,0,261,52,1,0,0,0,262,263,7,10,0,0,263,54,1,0,0,0,264,265,7,11,0,0,
	265,56,1,0,0,0,266,267,7,12,0,0,267,58,1,0,0,0,268,270,7,13,0,0,269,271,
	3,47,23,0,270,269,1,0,0,0,270,271,1,0,0,0,271,273,1,0,0,0,272,274,3,53,
	26,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,
	60,1,0,0,0,27,0,110,117,123,133,144,155,157,164,166,170,176,197,200,203,
	209,216,220,223,229,232,240,248,256,258,270,275,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!TASONLexer.__ATN) {
			TASONLexer.__ATN = new ATNDeserializer().deserialize(TASONLexer._serializedATN);
		}

		return TASONLexer.__ATN;
	}


	static DecisionsToDFA = TASONLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}